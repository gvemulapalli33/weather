[{"/Users/gvemulapalli/Desktop/ReactProjects/weather/src/index.js":"1","/Users/gvemulapalli/Desktop/ReactProjects/weather/src/reportWebVitals.js":"2","/Users/gvemulapalli/Desktop/ReactProjects/weather/src/App.js":"3","/Users/gvemulapalli/Desktop/ReactProjects/weather/src/context/weatherContext.js":"4","/Users/gvemulapalli/Desktop/ReactProjects/weather/src/hooks/useFetch.js":"5","/Users/gvemulapalli/Desktop/ReactProjects/weather/src/components/weather/weather.js":"6","/Users/gvemulapalli/Desktop/ReactProjects/weather/src/util/helper.js":"7"},{"size":752,"mtime":1609383644897,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1609315870641,"results":"10","hashOfConfig":"9"},{"size":525,"mtime":1609383209237,"results":"11","hashOfConfig":"9"},{"size":655,"mtime":1609334409702,"results":"12","hashOfConfig":"9"},{"size":738,"mtime":1609334409702,"results":"13","hashOfConfig":"9"},{"size":6019,"mtime":1609334409701,"results":"14","hashOfConfig":"9"},{"size":1352,"mtime":1609334409703,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1fyjmp7",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"/Users/gvemulapalli/Desktop/ReactProjects/weather/src/index.js",[],["34","35"],"/Users/gvemulapalli/Desktop/ReactProjects/weather/src/reportWebVitals.js",[],"/Users/gvemulapalli/Desktop/ReactProjects/weather/src/App.js",[],"/Users/gvemulapalli/Desktop/ReactProjects/weather/src/context/weatherContext.js",[],"/Users/gvemulapalli/Desktop/ReactProjects/weather/src/hooks/useFetch.js",["36"],"import  {useState, useEffect} from \"react\";\n\nexport default function useFetch(url) {\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const [data, setData] = useState({});\n    \n    const getData = async (url) => {\n        try {\n            setLoading(true);\n            let response = await fetch(url);\n            let data = await response.json();\n            console.log(data);\n            localStorage.setItem(\"weather\", JSON.stringify(data));\n            setData(data);\n        } catch(error) {\n            setError(error);\n        } finally {\n            setLoading(false);\n        }\n    }\n\n    useEffect(() => {\n        getData(url);\n    }, []);\n\n    return [loading, error, data];\n}","/Users/gvemulapalli/Desktop/ReactProjects/weather/src/components/weather/weather.js",["37","38","39","40","41","42","43","44","45","46"],"import React, {useContext, useEffect, useState} from \"react\";\nimport {weatherContext} from \"../../context/weatherContext\";\nimport useFetch from \"../../hooks/useFetch\";\nimport './weather.css';\nimport {formatTemperature, formatTime, imageMapping} from \"../../util/helper\";\nconst url = `http://api.openweathermap.org/data/2.5/weather?q=London,uk&units=metric&APPID=e4a0f96c5a39c793a70c096770c0051e`;\n\nfunction Weather() {\n    const {addWeatherData, timeOfDay} = useContext(weatherContext);\n    const localData = JSON.parse(localStorage.getItem(\"weather\"));\n    const [isDay, setDay] = useState('');\n    const [isNight, setNight] = useState('');\n    const [weatherInfo, setWeatherInfo] = useState({});\n    const [loading, error, data] = useFetch(url);\n    let description, currentTime, name, currentTemp, currentCondition, minTemp, maxTemp, sunrise, sunset;\n\n    if (Object.keys(localData).length > 0) {\n       ({ dt: currentTime, main: {temp : currentTemp, feels_like: currentCondition, temp_min: minTemp, temp_max: maxTemp}, name, sys: {sunrise, sunset}, weather: [{description}]} = localData);\n    }\n\n    const mist = [\"mist\", \"Smoke\", \"Haze\", \"sand\", \"fog\", \"dust\", \"ash\", \"squalls\", \"tornado\"];\n\n    const getIcon = (description) => {\n        if (description.includes(\"thunderstorm\")) {\n            return imageMapping['thunderStormIcon'];\n        } else if (description.includes(\"rain\") || description.includes('drizzle')) {\n           return imageMapping['rainIcon'];\n       } else if (description.includes('snow') || description.includes('sleet')) {\n           return imageMapping['snowIcon'];\n       } else if (mist.includes(description)) {\n           return imageMapping['fogIcon'];\n       } else if (description.includes('cloud')) {\n            return imageMapping['cloudIcon'];\n       } else {\n           return imageMapping['sunIcon'];\n       }\n    };\n\n    useEffect (() => {\n        if (Object.keys(data).length > 0) {\n           addWeatherData(data);\n           ({ dt: currentTime, main: {temp : currentTemp, feels_like: currentCondition, temp_min: minTemp, temp_max: maxTemp}, name, sys: {sunrise, sunset}, weather: [{description}]} = data);\n           setWeatherInfo({\n            currentTemp,\n            currentCondition,\n            minTemp,\n            maxTemp,\n            name,\n            sunrise,\n            sunset, \n            description\n           });\n\n           const sunriseTime = formatTime(new Date(sunrise * 1000));\n           const timing = formatTime(new Date(currentTime * 1000));\n           const [time, meredian] = timing.split(' ');\n           if (meredian === 'AM' && +time < +sunriseTime.split(' ')[0]) {\n               setNight(true);\n           } else {\n               setDay(true);\n           }\n           timeOfDay(isNight, isDay);\n        }\n    }, [data]);\n\n    const nightColors = {\n        border: `1px solid var(--night-text-color)`,\n        boxShadow: `1px 2px 10px var(--night-box-shadow)`\n    }\n\n    const nightTextColor = {\n        color: `var(--night-text-color)`\n    }\n\n    const dayTextColor = {\n        color: `var(--day-text-color)`,\n    }\n\n    const dayBorderColor = {\n        border: `3px solid var(--day-text-color)`\n    }\n\n    const nightBorderColor = {\n        border: `3px solid var(--night-text-color)`\n    }\n\n\n    const dayColors = {\n        border: `1px solid var(--day-text-color)`,\n        boxShadow: `1px 2px 10px var(--day-box-shadow-color)`\n    }\n\n    return (\n        <>\n            {loading && <p>Loading...</p>}\n            {error && <p>Error. Try again Later</p>}\n            {data && \n            <article className=\"weatherInfo\" style={isNight ? nightColors : dayColors}>\n                <h1 className=\"cityName\" style={isNight ? nightTextColor : dayTextColor}>{name}</h1>\n                <img className=\"forecast\" src={getIcon(description)} alt=\"weather condition\"></img>\n                <h2 className=\"overview\" style={isNight ? nightTextColor : dayTextColor}>{description}</h2>\n                <section className=\"dayInfo\">\n                <div className=\"dayTiming\" style={isNight ? nightBorderColor : dayBorderColor}>\n                <p className=\"subText\" style={isNight ? nightTextColor : dayTextColor}>\n                 <span className=\"time\">\n                 <span><img className=\"sunrise\" src={imageMapping['sunIcon']} alt=\"sunrise\"/></span>\n                 {formatTime(new Date(sunrise * 1000))}\n                 </span>\n                 <span className=\"title\">sunrise</span>  \n                </p>\n                <p className=\"subText\" style={isNight ? nightTextColor : dayTextColor}>\n                <span className=\"time\">\n                <span>\n                <img className=\"sunset\" src={imageMapping['sunsetIcon']} alt=\"sunset\"/></span>\n                {formatTime(new Date(sunset))}\n                </span>\n                <span className=\"title\">sunset</span>  \n                </p>\n                </div>\n                <div className=\"dayTiming\" style={isNight ? nightBorderColor : dayBorderColor}>\n                    <p className=\"subText\" style={isNight ? nightTextColor : dayTextColor}>\n                    <span className=\"time\">\n                    <span>\n                    <img className=\"temperature\" src={imageMapping['temperatureIcon']} alt=\"temperature\"/></span>\n                    {formatTemperature(minTemp)}\n                    </span>\n                    <span className=\"title\">min temp</span>  \n                    </p>\n                    <p className=\"subText\" style={isNight ? nightTextColor : dayTextColor}> \n                    <span className=\"time\">\n                    <span><img className=\"temperature\" src={imageMapping['temperatureIcon']} alt=\"temperature\"/></span>\n                    {formatTemperature(maxTemp)}\n                    </span>\n                    <span className=\"title\">max temp</span> \n                   \n                    </p>\n                </div>\n                </section>\n            </article>\n            }\n\n        </>\n\n    );\n}\n\nexport default Weather;\n","/Users/gvemulapalli/Desktop/ReactProjects/weather/src/util/helper.js",[],["47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":25,"column":8,"nodeType":"55","endLine":25,"endColumn":10,"suggestions":"56"},{"ruleId":"57","severity":1,"message":"58","line":13,"column":12,"nodeType":"59","messageId":"60","endLine":13,"endColumn":23},{"ruleId":"53","severity":1,"message":"61","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"53","severity":1,"message":"62","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"53","severity":1,"message":"63","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"53","severity":1,"message":"64","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"53","severity":1,"message":"65","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"53","severity":1,"message":"66","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"53","severity":1,"message":"67","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"53","severity":1,"message":"68","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"53","severity":1,"message":"69","line":42,"column":186,"nodeType":"59","endLine":42,"endColumn":190},{"ruleId":"49","replacedBy":"70"},{"ruleId":"51","replacedBy":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'url'. Either include it or remove the dependency array.","ArrayExpression",["74"],"no-unused-vars","'weatherInfo' is assigned a value but never used.","Identifier","unusedVar","Assignments to the 'currentTime' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'currentTemp' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'currentCondition' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'minTemp' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'maxTemp' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'name' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'sunrise' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'sunset' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Assignments to the 'description' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.",["72"],["73"],"no-global-assign","no-unsafe-negation",{"desc":"75","fix":"76"},"Update the dependencies array to be: [url]",{"range":"77","text":"78"},[696,698],"[url]"]